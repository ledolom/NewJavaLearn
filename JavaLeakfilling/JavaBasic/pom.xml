<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>JavaLeakfilling</artifactId>
        <groupId>com.ledolom</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>


    <artifactId>JavaBasic</artifactId>

    
    <properties>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
        <slf4j.verison>1.7.30</slf4j.verison>
    </properties>
<!--
一、scope作用域介绍
Maven的一个哲学是约定大于配置，所以在maven中，很多内容都有默认值，scope的默认值是compile。
scope元素的作用：控制 dependency（依赖）元素的使用范围。通俗的讲，就是控制 Jar 包在哪些范围被加载和使用。
这个范围包括，编译、测试、运行，并且还可以加上是否被打入包中。
二、Scope分类
Scope的作用域范围包括compile、test、provided、runtime、system、import。

1. compile
此范围为默认依赖范围，是一个比较强的依赖，适用于所有阶段。
这些dependencie（依赖）的jar，会传递到其他依赖的上层项目中。
由于运行时需要所以编译范围的依赖会被打包，会随着项目一起发布。
范围：编译、测试、运行（部署）都有效 。

2. test
表示被依赖项目仅仅参与测试相关的工作，在编译和运行时都不需要，只在编译测试代码或者运行测试代码的时候才能使用该依赖。
比较典型的如junit。由于运行时不需要所以test范围依赖不会被打包。
范围：仅测试有效

3. provided
provided依赖在编译和测试时需要，在运行时不需要。
正因为运行时无效，可以防止和tomcat下jar冲突，因为servlet api被tomcat容器提供，就不需要maven再重复引入。
由于运行时不需要所以provided范围依赖不会被打包。
范围：编译、测试有效。

4. runtime
runtime依赖在运行和测试的时候需要，但在编译的时候不需要。与compile相比，被依赖项目无需参与项目的编译。
比如：jdbc的驱动包，项目主代码的编译只需要JDK提供的JDBC接口，只有在执行测试或者运行项目的时候才需要实现上述接口的具体JDBC驱动。
由于运行时需要所以runtime范围的依赖会被打包。
范围：测试、运行有效。

5. system
system范围依赖与provided类似，但是你必须显式的提供一个位于本地系统中JAR文件的路径，需要指定systemPath磁盘路径，system依赖不推荐使用。
范围：测试、运行有效

三、总结
依赖范围由强到弱的顺序是：compile>provided>runtime>test
由于system依赖不怎么推荐使用。下面排序就不排入了，如果排序和provided并排
实际应用：在SpringBoot项目中，我们可以把一些common的功能抽出去自定义一个starter，比如cry-oss-spring-boot-starter，
具体他可以支持阿里云、Amozon、minio等，为了避免组件太重，可以定义他的<scope>为privided ，实际应用中根据需求再引入具体的包


dependencies即使在子项目中不写该依赖项，那么子项目仍然会从父项目中继承该依赖项（全部继承）

dependencyManagement里只是声明依赖，并不实现引入，因此子项目需要显示的声明需要用的依赖。
如果不在子项目中声明依赖，是不会从父项目中继承下来的；只有在子项目中写了该依赖项，并且没有指定具体版本，
才会从父项目中继承该项，并且version和scope都读取自父pom;另外如果子项目中指定了版本号，那么会使用子项目中指定的jar版本。
-->
    <dependencies>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.75</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.verison}</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.16</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

</project>